<can-component tag="create-user">
  <view>
    <div class="modal fade" id="NewUser" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <h4 class="modal-title" id="myModalLabel">Create New User</h4>
          </div>
          <div class="modal-body">
            <div class="row">
              <div class="col-sm-12">
                <div class="form-group no-margin-bottom">
                  <label for="new-user-email">User Email</label>
                  <input type="text" id="new-user-email" value:bind="email" />
                </div>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            {{#if errorMessage}}
              <div class="alert alert-danger" role="alert">Error: {{errorMessage}}</div>
            {{/if}}
            <button type="button" class="btn btn-primary" on:click="save()">{{#if processing}}<i class="fa fa-spin fa-spinner"></i>{{else}}Save{{/if}}</button>
          </div>
        </div>
      </div>
    </div>
  </view>
  <view-model>
    import DefineMap from 'can-define/map/map';
    import User from '~/models/user'

    export default DefineMap.extend({
      email: {
        set (val) {
          this.errorMessage = ''
          this.processing = false
          return val
        }
      },
      processing: 'boolean',
      errorMessage: 'string',
      save () {
        this.errorMessage = ''
        this.processing = true
        const user = new User({ email: this.email })

        return user.save()
          .then(() => {
            this.processing = false
            this.createUser(user)
          }).catch(err => {
            console.error(err)
            this.processing = false
            this.errorMessage = err.message || 'Sorry, an error occured.'
          })
      }
    });
  </view-model>
</can-component>
